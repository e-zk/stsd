stsd - Secure Time Synchronisation Daemon
=========================================
Set system date based on HTTPS date headers.
Inspired by Whonix's sdwdate, and Madaidan's secure-time-sync.


What's wrong with NTP?
----------------------
Standard NTP does not make use any kind of cryptography. No encryption, no
authentication. This means NTP requests can be sniffed and tampered with
to send a system the wrong time [1].
Correct system time is necessary for use of modern public key cryptography
(TLS/SSL for example).

stsd aims to overcome these shortcomings of NTP.

Alternatively, if you use OpenBSD's openntpd, it is possible to set
'constraints' that make use of HTTPS date headers to act as an authenticated
constraint - NTP packets falling outside of the range of the constraint are
discarded and NTP servers sending these packets are marked as invalid [2].


How it works
------------
At random intervals (between 60 minutes and 180 minutes) stsd sets the system
time based on the timestamp extracted from HTTPS headers (RFC2616). The
website it connects to is randomly selected from the pool file.

Optionally it can do this all over Tor, favouring the onion addresses
specified in the pool file.


Pool file format
----------------
The pool file contains a newline separated list of HTTPS URLs. Each URL can
optionally have an associated onion address.
The optional onion address will be favoured over the clearnet address when the
--use-tor argument is given.

Each line in the file of the format:

	<url>[,onion url]
	
An example pool file (stsd_pool_example) is provided.


References
----------
1: https://blog.hboeck.de/archives/863-Dont-update-NTP-stop-using-it.html
2: https://openntpd.org/ + https://man.openbsd.org/ntpd.conf#CONSTRAINTS


See also
--------
sdwdate: https://www.whonix.org/wiki/Sdwdate
secure-time-sync: https://gitlab.com/madaidan/secure-time-sync

